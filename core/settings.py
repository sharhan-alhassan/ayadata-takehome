"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from urllib.parse import urlparse
import environ
import os, certifi
from pathlib import Path
from datetime import timedelta
from huey import SqliteHuey

env = environ.Env()
environ.Env.read_env()

env = environ.Env(
    # Set default values for build time
    DEBUG=(bool, False),
    SECRET_KEY=(str, 'dummy-key-for-build'),
    # Add other environment variables with defaults
    REDIS_HOST=(str, 'localhost'),
    REDIS_PORT=(int, 6379),
    REDIS_USERNAME=(str, ''),
    REDIS_PASSWORD=(str, ''),
    DBNAME=(str, 'postgres'),
    DBUSER=(str, 'postgres'),
    DBHOST=(str, 'localhost'),
    DBPASSWORD=(str, ''),
    DBPORT=(int, 5432),
    EMAIL_HOST_USER=(str, ''),
    EMAIL_HOST_PASSWORD=(str, ''),
    DEFAULT_FROM_EMAIL=(str, 'noreply@example.com'),
    SERVER_EMAIL=(str, 'server@example.com'),
    EMAIL_PORT=(int, 587),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=True)
SHOW_SWAGGER = env.bool("SHOW_SWAGGER", default=True)

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "*",
    "http://ayadata.tamale.forward.tiaspaces.com",
    "https://ayadata.tamale.forward.tiaspaces.com",
]

CORS_ORIGINS = [
    "localhost", 
    "127.0.0.1", 
    "*", 
    "http://ayadata.tamale.forward.tiaspaces.com",
    "https://ayadata.tamale.forward.tiaspaces.com",
]

CORS_ORIGIN_ALLOW_ALL = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # Installed apps
    "tasks",
    "users",
    # Third-party apps
    "drf_yasg",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_rq",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "libraries": {},
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": env("DBNAME"),
#         "USER": env("DBUSER"),
#         "PASSWORD": env("DBPASSWORD"),
#         "HOST": env("DBHOST"),
#         "PORT": env("DBPORT"),
#         "OPTIONS": {"sslmode": "require"},
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    # '/var/www/static/',
]

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = os.path.join(BASE_DIR, "/media/")

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# STATIC_ROOT = "staticfiles/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": None,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=3),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(days=10),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=20),
}

AUTH_USER_MODEL = "users.CustomUser"
SITE_ID = 1

REDIS_URL = "redis://{username}:{password}@{host}:{port}".format(
    username=env("REDIS_USERNAME"),
    password=env("REDIS_PASSWORD"),
    host=env("REDIS_HOST"),
    port=env("REDIS_PORT"),
)

# print(f"####################### REDIS ####################: {REDIS_URL}")

REDIS_CACHE_NAME = "aya_redis_cache"
REDIS_HUEY_TASK_NAME = "aya_redis_huey"
CACHE_VIEWS_PREFIX = f"{REDIS_CACHE_NAME}:view"

# Django-Redis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "KEY_PREFIX": REDIS_CACHE_NAME,
    }
}

# HUEY_DB_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'huey.db')

# DJANGO_HUEY = {
#     "default": "ayahuey", 
#     "queues": {
#         "ayahuey": { 
#             "huey_class": "huey.RedisHuey",
#             "url": REDIS_URL,
#             "name": REDIS_HUEY_TASK_NAME,
#             "results": True,
#             "store_none": False,
#             "immediate": False,
#             "utc": True,
#             "blocking": False,
#             "consumer": {
#                 "workers": 8,
#                 "worker_type": "process",
#                 "initial_delay": 0.1,
#                 "backoff": 1.0,
#                 "max_delay": 2.0,
#             },
#             "connection": {
#                 # 'connection_pool': pool,
#             },
#         }
#     },
# }

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_USE_TLS = True
EMAIL_PORT = env("EMAIL_PORT")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER

# os.environ["‘SSL_CERT_FILE’"] = certifi.where()


redis_url = urlparse(REDIS_URL)

# Extract components from the URL
redis_username = redis_url.username
redis_password = redis_url.password
redis_host = redis_url.hostname
redis_port = redis_url.port
redis_db = 0  # Default DB, or extract from the URL path if needed

# Configure RQ_QUEUES
RQ_QUEUES = {
    'default': {
        'USE_REDIS_CACHE': 'default',
    }
    # 'default': {
    #     'HOST': redis_host,
    #     'PORT': redis_port,
    #     'DB': redis_db,
    #     'USERNAME': redis_username,
    #     'PASSWORD': redis_password,
    #     'DEFAULT_TIMEOUT': 360,
    # },
}